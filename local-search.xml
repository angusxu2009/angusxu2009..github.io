<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/27/hello-world/"/>
    <url>/2024/04/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>226</title>
    <link href="/2024/02/26/0226/"/>
    <url>/2024/02/26/0226/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入是一个二叉树，每个节点有三个值,left right value（都是int）</span><br><span class="hljs-comment"># 给定构建好的二叉树，两个整型值，</span><br><span class="hljs-comment"># 输出这两个整型值在二叉树的最短距离</span><br><br><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">     1</span><br><span class="hljs-string">    / \</span><br><span class="hljs-string">   2   3 </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left, self.right = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>        self.val = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_common_father</span>(<span class="hljs-params">node, num1, num2</span>):<br>    <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> node.val == num1:<br>        <span class="hljs-keyword">return</span> node<br>    <span class="hljs-keyword">if</span> node.val == num2:<br>        <span class="hljs-keyword">return</span> node<br>    left = find_common_father(node.left, num1, num2) <span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    right = find_common_father(node.right, num1, num2) <span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> left <span class="hljs-keyword">and</span> right:<br>        <span class="hljs-keyword">return</span> node<br>    <span class="hljs-keyword">return</span> left <span class="hljs-keyword">if</span> left <span class="hljs-keyword">else</span> right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_dist</span>(<span class="hljs-params">node, num</span>):<br>    <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> node.val == num:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    left_dist = count_dist(node.left, num) <span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    right_dist = count_dist(node.right, num) <span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> left_dist != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> right_dist != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>(left_dist, right_dist)<br>    <span class="hljs-keyword">if</span> left_dist != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + left_dist<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + right_dist<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_dist2</span>(<span class="hljs-params">node, num, depth</span>):<br>    <span class="hljs-keyword">if</span> node.val == num:<br>        <span class="hljs-keyword">return</span> depth<br>    <span class="hljs-keyword">if</span> node.left:<br>        left = count_dist2(node.left, num, depth + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> node.right:<br>        right = count_dist2(node.right, num, depth + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> left != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> left<br>    <span class="hljs-keyword">return</span> right<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_bfs</span>(<span class="hljs-params">node, num</span>):<br>    depth = <span class="hljs-number">0</span><br>    que = [node]<br>    <span class="hljs-keyword">while</span> que:<br>        cur_len = <span class="hljs-built_in">len</span>(que)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_len):<br>            <span class="hljs-keyword">if</span> que[i].val == num:<br>                <span class="hljs-keyword">return</span> depth<br>            <span class="hljs-keyword">if</span> que[i].left:<br>                que.append(que[i].left)<br>            <span class="hljs-keyword">if</span> que[i].right:<br>                que.append(que[i].right)<br>        depth += <span class="hljs-number">1</span><br>        que = que[cur_len:]<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">two_node_min_dist</span>(<span class="hljs-params">root, num1, num2</span>):<br>    common_father = find_common_father(root, num1, num2)<br>    dist_1 = count_dist(common_father, num1)<br>    dist_2 = count_dist(common_father, num2)<br>    <span class="hljs-keyword">return</span> dist_1 + dist_2<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>203</title>
    <link href="/2024/02/03/0203/"/>
    <url>/2024/02/03/0203/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 非递减数组，目标值，返回开始位置和结束位置</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target = <span class="hljs-number">4</span><br>ret = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>````<br><br>```python<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">arr, target</span>):<br>    n = <span class="hljs-built_in">len</span>(arr)<br>    l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    res = [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">while</span> l &lt; r:<br>        mid = l + r &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> arr[mid] &gt;= target:<br>            r = mid<br>        <span class="hljs-keyword">else</span>:<br>            l = mid + <span class="hljs-number">1</span><br>    res[<span class="hljs-number">0</span>] = l <span class="hljs-keyword">if</span> arr[l] == target <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> l &lt; r:<br>        mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> arr[mid] &lt;= target:<br>            l = mid<br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    res[<span class="hljs-number">1</span>] = l <span class="hljs-keyword">if</span> arr[l] == target <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试用例</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target = <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(find(arr, target))<br><br>arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target2 = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(find(arr2, target2))<br><br>arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target3 = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(find(arr3, target3))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>] <span class="hljs-comment"># len=m</span><br>nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>] <span class="hljs-comment"># len=n</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-comment"># O(log(m+n))</span><br><span class="hljs-comment"># 找出中位数</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> heappush, heappop<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_mid</span>(<span class="hljs-params">nums1, nums2</span>):<br>    left, right = [], []<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1 + nums2:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(left) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> -left[<span class="hljs-number">0</span>] &gt;= num:<br>            heappush(left, -num)<br>        <span class="hljs-keyword">else</span>:<br>            heappush(right, num)<br>        <span class="hljs-keyword">while</span> right <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(right) &gt;= <span class="hljs-built_in">len</span>(left):<br>            right_t = heappop(right)<br>            heappush(left, -right_t)<br>        <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(left) &gt;= <span class="hljs-built_in">len</span>(right) + <span class="hljs-number">1</span>:<br>            left_t = -heappop(left)<br>            heappush(right, left_t)<br>    <span class="hljs-comment"># print(len(left), len(right))</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(left) == <span class="hljs-built_in">len</span>(right):<br>        <span class="hljs-comment"># print(f&#x27;left:&#123;-left[0]&#125;, right:&#123;right[0]&#125;&#x27;)</span><br>        <span class="hljs-keyword">return</span> (-left[<span class="hljs-number">0</span>] + right[<span class="hljs-number">0</span>]) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> right[<span class="hljs-number">0</span>]<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试用例</span><br>res = find_mid([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># 1, 2, 3, 4, 5, 6, 8</span><br><br>res = find_mid([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
