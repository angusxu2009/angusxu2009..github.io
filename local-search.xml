<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度学习八股</title>
    <link href="/2024/05/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%AB%E8%82%A1/"/>
    <url>/2024/05/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>机器学习八股</title>
    <link href="/2024/05/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AB%E8%82%A1/"/>
    <url>/2024/05/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1、欠拟合、过拟合"><a href="#1、欠拟合、过拟合" class="headerlink" title="1、欠拟合、过拟合"></a>1、欠拟合、过拟合</h1><p>机器学习通常是在最小化经验风险。</p><p>欠拟合：模型未能很好的学习数据集，通常表现为训练集和测试集上的分数都很低。</p><p>过拟合：模型对数据过度学习（甚至把噪声也学习了进去），表现为在训练集上分数很高、测试集上分数很低。</p><p>如何防止过拟合：</p><ol><li><p>降低模型复杂度。</p><ul><li><p>使用更简单的模型（奥卡姆剃刀）</p></li><li><p>Early Stopping。迭代训练直到模型在测试集上的分数不再提升，记录最佳模型。</p></li><li><p>正则化：使用正则项，惩罚过大的参数权重。</p><ul><li><p>$f(x) &#x3D; g(x) + \sum_i^N||w_i||^n$</p></li><li><p>L1：稀疏参数，由于绝对值的特性，可以得到权重的稀疏解。</p></li><li><p>L2：参数更小的解。最小化$f(x)$的过程同时也把范数最小了。</p></li></ul></li><li><p>Dropout</p><p>  随机丢弃一些神经元连接。在深度学习中有效。</p></li><li><p>Multi-task Learning</p><p>  Hard share: 多个任务共享权重。</p><p>  Soft share: 每个任务都有独立的模型。</p></li><li><p>增加数据量。</p></li></ul></li></ol><h1 id="2、评价指标"><a href="#2、评价指标" class="headerlink" title="2、评价指标"></a>2、评价指标</h1><p>$N$为样本总数</p><p>$TP$为真阳性（预测和实际均为True）</p><p>$FP$为假阳性（预测为True，实际为False）</p><p>$TN$为真阴性（预测和实际均为False）</p><p>$FN$为假阴性（预测为False，实际为True）</p><h2 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h2><p>$Accuracy &#x3D; \frac{TP + TN}{TP+FP+TN+FN}$</p><h2 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h2><p>$Precision &#x3D; \frac{TP}{TP+FP}$ </p><p>物理含义：预测为真的有多少实际为真。</p><h2 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h2><p>$Recall &#x3D; \frac{TP}{TP+FN}$</p><p>物理含义：实际为真的有多少预测为真。</p><h2 id="F1-Score"><a href="#F1-Score" class="headerlink" title="F1-Score"></a>F1-Score</h2><p>$F_1-Score &#x3D; \frac{2}{\frac{1}{Reacll} + \frac{1}{Precision}} &#x3D; 2 * \frac{Reacll * Precision}{Recall + Precision}$</p><h2 id="多分类Precision、Recall、F1"><a href="#多分类Precision、Recall、F1" class="headerlink" title="多分类Precision、Recall、F1"></a>多分类Precision、Recall、F1</h2><p>对于多分类问题，有三种方法取平均</p><h3 id="Macro-Average"><a href="#Macro-Average" class="headerlink" title="Macro-Average"></a>Macro-Average</h3><p>直接算三个平均值。</p><h3 id="Weight-Acerage"><a href="#Weight-Acerage" class="headerlink" title="Weight-Acerage"></a>Weight-Acerage</h3><p>加权平均。根据样本类别占比算权重，更容易受到常见类的影响。</p><h3 id="Micro-Average"><a href="#Micro-Average" class="headerlink" title="Micro-Average"></a>Micro-Average</h3><p>先把每个类别的TP、FP、FN相加起来，再计算Precision、Recall和F1。</p><p>$Micro-Precision &#x3D; \frac{\sum TP_i}{\sum TP_i + FP_i}$</p><p>$Micro-Recall &#x3D; \frac{\sum TP_i}{\sum TP_i + FN_i}$</p><p>值得注意的是，Micro-Precison和Micro-Recall始终相同，因为某一类的FP，是其他类的FN。同时与Accuracy和Micro- F1相同。</p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><h2 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h2><p>$h_\theta(x) &#x3D; \frac{1}{1 + e^{-\theta x}}$</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><h3 id="1、定义概率模型"><a href="#1、定义概率模型" class="headerlink" title="1、定义概率模型"></a>1、定义概率模型</h3><p>$P(y&#x3D;1|x;\theta)&#x3D;h_\theta(x)$</p><p>$P(y&#x3D;0|x;\theta)&#x3D;1 - h_\theta(x)$</p><h3 id="2、似然函数"><a href="#2、似然函数" class="headerlink" title="2、似然函数"></a>2、似然函数</h3><p>$L(\theta) &#x3D; \prod_{i&#x3D;1}^N P(y^{(i)}|x^{(i)};\theta)$</p><p>根据条件概率的定义，可以改写似然为：</p><p>$L(\theta) &#x3D; \prod_{i&#x3D;1}^N[h_\theta(x^{(i)})]^{y(i)}[1-h_\theta(x^{(i)})]^{1-y(i)}$</p><p>为了方便计算，对L取对数：</p><p>$log L(\theta) &#x3D; \sum_{i&#x3D;1}^N [y^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$</p><p>我们的目的是最大化L，但是通常用梯度下降算法最小化目标函数，所以通常加个符号：</p><p>$J(\theta)&#x3D;-\frac{1}{N} \sum_{i&#x3D;1}^N [y^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$</p><h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><p>梯度下降：$\theta:&#x3D; \theta - \alpha \nabla J(\theta)$</p><p>由于随机梯度下降选择的是单个样本进行更新：</p><p>$\theta:&#x3D;\theta - \alpha \nabla J^{(i)}(\theta)$</p><p>逻辑回归对样本i的损失函数为：</p><p>$J(\theta)&#x3D;-\frac{1}{N} \sum_{i&#x3D;1}^N [y^{(i)}log h_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]$</p><p>对第i个样本的梯度为：</p><p>$\nabla J^{(i)}(\theta) &#x3D; \frac{\partial J^{(i)}}{\partial \theta} &#x3D; - [y^{(i)}\frac{\partial logh_\theta(x^{(i)})}{\partial \theta} + (1-y^{(i)})\frac{\partial log(1 - h_\theta(x^{(i)})}{\partial \theta}]$</p><p>$&#x3D;-[y^{(i)}\frac{1}{h_\theta(x^{(i)})}\frac{\partial h_\theta(x^{(i)})}{\partial \theta} - (1-y^{(i)})\frac{1}{1-h_\theta(x^{(i)})}\frac{\partial h_\theta(x^{(i)})}{\partial \theta}]$</p><p>$&#x3D;-[y^{(i)}\frac{1}{h_\theta(x^{(i)})} - (1-y^{(i)})\frac{1}{1-h_\theta(x^{(i)})}]\frac{\partial h_\theta(x^{(i)})}{\partial \theta}$</p><p>$h_\theta(x^{(i)}) &#x3D; \frac{1}{1+e^{-\theta x^{(i)}}}$ </p><p>&#x3D;&gt;</p><p>$1-h_\theta(x^{(i)}) &#x3D; \frac{e^{-\theta x^{(i)}}}{1+e^{-\theta x^{(i)}}}$</p><p>$\frac{\partial h_\theta(x^{(i)})}{\partial \theta} &#x3D; -(1+e^{-\theta x^{(i)}})^{-2}*-e^{-\theta x^{(i)}}x^{(i)}$</p><p>$&#x3D;h_\theta(x^{(i)})(1-h_\theta(x^{(i)}))x^{(i)}$ </p><p>$\nabla J^{(i)}(\theta) &#x3D; -[y^{(i)}\frac{1}{h_\theta(x^{(i)})} - (1-y^{(i)})\frac{1}{1-h_\theta(x^{(i)})}]h_\theta(x^{(i)})(1-h_\theta(x^{(i)}))x^{(i)}$</p><p>$&#x3D; -[y^{(i)}(1-h_\theta(x^{(i)})) - (1-y^{(i)})h_\theta(x^{(i)})]x^{(i)}$</p><p>$&#x3D;(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$</p><p>所以得到$\theta$更新公式为：</p><p>$\theta :&#x3D; \theta - \alpha(h_\theta(x^{(i)})-y^{(i)})x^{(i)}$</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogisticRegression</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, learning_rate=<span class="hljs-number">0.01</span>, num_epochs=<span class="hljs-number">1000</span></span>):<br>        self.learning_rate = learning_rate<br>        self.num_epochs = num_epochs<br>        self.theta = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">self, z</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-z))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fit</span>(<span class="hljs-params">self, X, y</span>):<br>        m, n = X.shape<br>        self.theta = np.zeros(n + <span class="hljs-number">1</span>)  <span class="hljs-comment"># Initialize parameters with zeros</span><br>        X = np.concatenate((np.ones((m, <span class="hljs-number">1</span>)), X), axis=<span class="hljs-number">1</span>)  <span class="hljs-comment"># Add bias term</span><br><br>        <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.num_epochs):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>                h_theta = self.sigmoid(np.dot(X[i], self.theta))<br>                gradient = np.dot(X[i].T, (h_theta - y[i]))<br>                self.theta -= self.learning_rate * gradient<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, X</span>):<br>        m = X.shape[<span class="hljs-number">0</span>]<br>        X = np.concatenate((np.ones((m, <span class="hljs-number">1</span>)), X), axis=<span class="hljs-number">1</span>)  <span class="hljs-comment"># Add bias term</span><br>        predictions = self.sigmoid(np.dot(X, self.theta))<br>        <span class="hljs-keyword">return</span> (predictions &gt;= <span class="hljs-number">0.5</span>).astype(<span class="hljs-built_in">int</span>)<br><br></code></pre></td></tr></table></figure><h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><h2 id="约束优化问题"><a href="#约束优化问题" class="headerlink" title="约束优化问题"></a>约束优化问题</h2><p>给定有标签的广告数据集${(x_1, y_1), (x_2, y_2), …, (x_N, y_N)}$，其中$x_i$表示第i个广告的特征向量，$y_i$表示对应的标签（0或1）。</p><p>SVM的目标是找到一个超平面，将两类数据分隔开来，同时这两类数据的距离尽可能的远。</p><p>首先，可以用以下的方程表示超平面：</p><p>$\omega^Tx+b&#x3D;0$</p><p>其中，$\omega$是超平面的法向量，决定了超平面的方向，$b$是偏置项。</p><p>SVM的目标是找到间隔（margin）最大化的超平面，即最大化$\frac{2}{\Vert \omega \Vert}$</p><p>为了使得点能够正确分类，加上约束条件：</p><p>$y_i(\omega^Tx_i+b)\geq1,i\in[1,N]$</p><p>因此，我们的优化问题可以表述为：</p><p>$\min_{w,b} \frac{1}{2} \Vert \omega \Vert^2$</p><p>$s.t.y_i(\omega^Tx_i+b)\geq 1,i\in[1, N]$</p><p>这是一个凸二次优化问题，可以通过拉格朗日方程求解。</p><h2 id="如何得到-max-frac-2-Vert-omega-Vert"><a href="#如何得到-max-frac-2-Vert-omega-Vert" class="headerlink" title="如何得到 $\max \frac{2}{\Vert \omega \Vert}$"></a>如何得到 $\max \frac{2}{\Vert \omega \Vert}$</h2><p>这个等价性可以通过支持向量机的几何解释来理解。</p><p>首先，我们定义超平面$\omega^Tx+b&#x3D;0$到某个数据点$x_i$的距离为$\frac{\vert \omega^Tx_i+b\vert}{\Vert \omega \Vert}$，这里的$\Vert \omega \Vert$是法向量$\omega$的范数。</p><p>注意，我们可以通过同时缩放$\omega$和$b$使得超平面的距离保持不变。不失一般性，可以设定$\Vert \omega \Vert&#x3D;1$，这样可以简化距离为$\vert \omega^Tx_i+b\vert$</p><p>对于支持向量$x_i$，有$y_i(\omega^Tx_i+b)&#x3D;1$，所以间隔就是$\frac{2}{\Vert \omega \Vert}$，最大化间隔即最大化$\frac{2}{\Vert \omega \Vert}$，即最小化$\frac{1}{2}\Vert \omega \Vert^2$。</p><h2 id="求解约束满足问题"><a href="#求解约束满足问题" class="headerlink" title="求解约束满足问题"></a>求解约束满足问题</h2><p>构建拉格朗日函数：</p><p>$\mathcal{L}(\omega, b, \alpha) &#x3D; \frac{1}{2} \Vert \omega \Vert^2-\sum_{i&#x3D;1}^{n}\alpha_i(y_i(\omega^Tx_i+b)-1)$</p><p>其中，$\alpha&#x3D;(\alpha_1, \alpha_2, …, \alpha_n)$是拉格朗日乘子向量。</p><p>接下来，求解拉格朗日方程对$\omega$和$b$的偏导数，并使其为0，得到：</p><p>$\frac{\partial L}{\partial \omega} &#x3D; \omega-\sum_{i&#x3D;1}^{n}\alpha_iy_ix_i &#x3D; 0$ &#x3D;&gt; $\omega&#x3D;\sum_{i&#x3D;1}^{n}\alpha_iy_ix_i$</p><p>$\frac{\partial L}{\partial b}&#x3D;-\sum_{i&#x3D;0}^{n}\alpha_iy_i&#x3D;0$ &#x3D;&gt; $\sum_{i&#x3D;0}^{n}\alpha_iy_i&#x3D;0$</p><p>带入方程，得到：</p><p>$\mathcal{L}(\omega, b, \alpha) &#x3D; \frac{1}{2}\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{n}\alpha_i\alpha_jy_iy_jx_ix_j-\sum_{i&#x3D;1}^{n}\sum_{i&#x3D;1}^{n}\alpha_i\alpha_jy_iy_jx_ix_j+\sum_{i&#x3D;1}^{n}\alpha_i$</p><p>$&#x3D;\sum_{i&#x3D;1}^{n}\alpha_i - \frac{1}{2}\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{n}\alpha_i\alpha_jy_iy_jx_ix_j$</p><p>上面消除了$\omega$、$b$，简化为$\mathcal{L}(\alpha)$的问题。即：</p><p>maximize $\mathcal{L}(\alpha) &#x3D; \frac{1}{2}\sum_{i&#x3D;1}^{n}\sum_{j&#x3D;1}^{n}\alpha_i\alpha_jy_iy_jx_ix_j$</p><p>s.t. $\sum_{i&#x3D;1}^{n}\alpha_iy_i &#x3D;0$</p><p>and $\alpha_i \geq 0, i \in [1, n]$</p><p>最后通过优化算法（如SMO算法），可以求解对偶问题得到最优的$\alpha$，再利用这些$\alpha$值来计算$\omega$和$b$的值，从而得到最优的超平面。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自我介绍</title>
    <link href="/2024/05/06/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/05/06/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划：划分数量</title>
    <link href="/2024/05/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E5%88%92%E5%88%86%E6%95%B0%E9%87%8F%E4%B8%93%E9%A2%98/"/>
    <url>/2024/05/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E5%88%92%E5%88%86%E6%95%B0%E9%87%8F%E4%B8%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h1><p>模板：计算最少（最多）可以划分出的子数组个数、划分方案数等。</p><p>一般定义$f[i]$表示长为$i$的前缀$a[:i]$在题目约束下，分割出的最少（最多）子数组个数（或者定义成分割方案数）。</p><p>枚举最后一个子数组的左端点$L$，从f[L]转移到$f[i]$，并考虑$a[L:j]$对最优解的影响。(解法以及题单 from <a href="https://leetcode.cn/circle/discuss/tXLS3i/">灵神</a>)</p><h1 id="132-分割回文串-II"><a href="#132-分割回文串-II" class="headerlink" title="132.分割回文串 II"></a><a href="https://leetcode.cn/problems/palindrome-partitioning-ii/description/">132.分割回文串 II</a></h1><p>等价于分割成的最小部分</p><p>用一个状态来表示一类方案。</p><p>集合：f[i]表示s(1~i)的所有分割方案</p><p>属性：最小值。</p><p>状态计算：</p><p>f[i]可以从{1<del>i, …, i</del>i}转移，取一个最小值。</p><p>假如是从k~i转移，f[k - 1] + 1。</p><p>需要做一个预处理，g(i,j)快速判断i到j是不是回文串。</p><p>g(i, j) &#x3D; g(i + 1, j - 1) and s[i] &#x3D;&#x3D; s[j]</p><p>因为要用到j-1，所以要先循环j。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCut</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        s = <span class="hljs-string">&#x27; &#x27;</span> + s;<br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">g</span>(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>));<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">1e8</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; ++ j) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i) &#123;<br>                <span class="hljs-keyword">if</span> (i == j) g[i][j] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == s[j]) &#123;<br>                    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &gt; j - <span class="hljs-number">1</span> || g[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) g[i][j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125; <br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++ j) &#123;<br>                <span class="hljs-keyword">if</span> (g[j][i]) &#123;<br>                    f[i] = <span class="hljs-built_in">min</span>(f[i], f[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n] - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCut</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        s = <span class="hljs-string">&#x27; &#x27;</span> + s<br>        g = [[<span class="hljs-literal">False</span>] * (n + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br>        f = [<span class="hljs-number">0x3f3f3f3f</span>] * (n + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> i == j:<br>                    g[i][j] = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">elif</span> s[i] == s[j]:<br>                    <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &gt; j - <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> g[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]:<br>                        g[i][j] = <span class="hljs-literal">True</span><br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span> + n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> g[j][i]:<br>                    f[i] = <span class="hljs-built_in">min</span>(f[i], f[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> f[n] - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维动态规划：起点-终点-起点</title>
    <link href="/2024/05/06/%E4%BA%8C%E7%BB%B4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E8%B5%B7%E7%82%B9-%E7%BB%88%E7%82%B9-%E8%B5%B7%E7%82%B9/"/>
    <url>/2024/05/06/%E4%BA%8C%E7%BB%B4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E8%B5%B7%E7%82%B9-%E7%BB%88%E7%82%B9-%E8%B5%B7%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h1><p>模板：二维DP从左上走到右下，再从右下走到左上。</p><p>解法：</p><p>首先，可以证明，相当于走2次DP。</p><p>然后，DP遍历是按照步数进行：f(i, j, k)，k表示部署，可以看成是斜着走。</p><p>特别注意的是，走到同一个格子只能计算一次。</p><p>思考：走k次怎么做？</p><h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><p><a href="https://leetcode.cn/problems/cherry-pickup/">Leecode 741</a></p><p>Solution:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">55</span>;<br><span class="hljs-type">int</span> f[N][N][N * <span class="hljs-number">2</span>];<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cherryPickup</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">-0x3f3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <span class="hljs-keyword">if</span> (grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-number">-1</span>) f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">3</span>; k &lt;= n * <span class="hljs-number">2</span>; ++ k) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, k - n); i &lt;= <span class="hljs-built_in">min</span>(n, k - <span class="hljs-number">1</span>); ++ i) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, k - n); j &lt;= <span class="hljs-built_in">min</span>(n, k - <span class="hljs-number">1</span>); ++ j) &#123;<br>                    <span class="hljs-keyword">if</span> (grid[i - <span class="hljs-number">1</span>][k - i - <span class="hljs-number">1</span>] == <span class="hljs-number">-1</span> || grid[j - <span class="hljs-number">1</span>][k - j - <span class="hljs-number">1</span>] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-type">int</span> t = grid[i - <span class="hljs-number">1</span>][k - i - <span class="hljs-number">1</span>];<br>                    <span class="hljs-comment">// 如果不是同一个格子，需要加上一次</span><br>                    <span class="hljs-keyword">if</span> (i != j) t += grid[j - <span class="hljs-number">1</span>][k - j - <span class="hljs-number">1</span>];<br>                    <span class="hljs-comment">// 枚举四种转移方式</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = i - <span class="hljs-number">1</span>; a &lt;= i; ++ a) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = j - <span class="hljs-number">1</span>; b &lt;= j; ++ b) &#123;<br>                            f[i][j][k] = <span class="hljs-built_in">max</span>(f[i][j][k], f[a][b][k - <span class="hljs-number">1</span>] + t);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, f[n][n][<span class="hljs-number">2</span> * n]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><p><a href="https://www.acwing.com/problem/content/1029/">Acwing 1027</a></p><p>Solution:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> f[N &lt;&lt; <span class="hljs-number">1</span>][N][N], w[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; a &gt;&gt; b &gt;&gt; c || a || b || c) w[a][b] = c;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= n + n; ++ k)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; ++ i1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; ++ i2)&#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;<br>                <span class="hljs-keyword">if</span>(j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= n)&#123;<br>                    <span class="hljs-type">int</span> t = w[i1][j1];<br>                    <span class="hljs-keyword">if</span>(i1 != i2) t += w[i2][j2];<br>                    <span class="hljs-keyword">auto</span> &amp;v = f[k][i1][i2];<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1][i2] + t);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[n + n][n][n] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><p><a href="https://www.acwing.com/problem/content/277/">Acwing 275</a></p><p>Solution:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">55</span>;<br><span class="hljs-type">int</span> f[N &lt;&lt; <span class="hljs-number">1</span>][N][N], w[N][N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++ i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; ++ j)&#123;<br>            cin &gt;&gt; w[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= n + m; ++ k)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; ++ i1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; ++ i2)&#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;<br>                <span class="hljs-keyword">if</span>(j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= m &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= m)&#123;<br>                    <span class="hljs-type">int</span> t = w[i1][j1];<br>                    <span class="hljs-keyword">if</span>(i1 != i2) t += w[i2][j2];<br>                    <span class="hljs-keyword">auto</span> &amp;v = f[k][i1][i2];<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1][i2] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>] + t);<br>                    v = <span class="hljs-built_in">max</span>(v, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>] + t);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; f[n + m][n][n] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/27/hello-world/"/>
    <url>/2024/04/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>226</title>
    <link href="/2024/02/26/0226/"/>
    <url>/2024/02/26/0226/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入是一个二叉树，每个节点有三个值,left right value（都是int）</span><br><span class="hljs-comment"># 给定构建好的二叉树，两个整型值，</span><br><span class="hljs-comment"># 输出这两个整型值在二叉树的最短距离</span><br><br><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">     1</span><br><span class="hljs-string">    / \</span><br><span class="hljs-string">   2   3 </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.left, self.right = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>        self.val = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_common_father</span>(<span class="hljs-params">node, num1, num2</span>):<br>    <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> node.val == num1:<br>        <span class="hljs-keyword">return</span> node<br>    <span class="hljs-keyword">if</span> node.val == num2:<br>        <span class="hljs-keyword">return</span> node<br>    left = find_common_father(node.left, num1, num2) <span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    right = find_common_father(node.right, num1, num2) <span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> left <span class="hljs-keyword">and</span> right:<br>        <span class="hljs-keyword">return</span> node<br>    <span class="hljs-keyword">return</span> left <span class="hljs-keyword">if</span> left <span class="hljs-keyword">else</span> right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_dist</span>(<span class="hljs-params">node, num</span>):<br>    <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> node.val == num:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    left_dist = count_dist(node.left, num) <span class="hljs-keyword">if</span> node.left <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    right_dist = count_dist(node.right, num) <span class="hljs-keyword">if</span> node.right <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> left_dist != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> right_dist != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>(left_dist, right_dist)<br>    <span class="hljs-keyword">if</span> left_dist != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + left_dist<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + right_dist<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_dist2</span>(<span class="hljs-params">node, num, depth</span>):<br>    <span class="hljs-keyword">if</span> node.val == num:<br>        <span class="hljs-keyword">return</span> depth<br>    <span class="hljs-keyword">if</span> node.left:<br>        left = count_dist2(node.left, num, depth + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> node.right:<br>        right = count_dist2(node.right, num, depth + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> left != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> left<br>    <span class="hljs-keyword">return</span> right<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_bfs</span>(<span class="hljs-params">node, num</span>):<br>    depth = <span class="hljs-number">0</span><br>    que = [node]<br>    <span class="hljs-keyword">while</span> que:<br>        cur_len = <span class="hljs-built_in">len</span>(que)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_len):<br>            <span class="hljs-keyword">if</span> que[i].val == num:<br>                <span class="hljs-keyword">return</span> depth<br>            <span class="hljs-keyword">if</span> que[i].left:<br>                que.append(que[i].left)<br>            <span class="hljs-keyword">if</span> que[i].right:<br>                que.append(que[i].right)<br>        depth += <span class="hljs-number">1</span><br>        que = que[cur_len:]<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">two_node_min_dist</span>(<span class="hljs-params">root, num1, num2</span>):<br>    common_father = find_common_father(root, num1, num2)<br>    dist_1 = count_dist(common_father, num1)<br>    dist_2 = count_dist(common_father, num2)<br>    <span class="hljs-keyword">return</span> dist_1 + dist_2<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>203</title>
    <link href="/2024/02/03/0203/"/>
    <url>/2024/02/03/0203/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 非递减数组，目标值，返回开始位置和结束位置</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target = <span class="hljs-number">4</span><br>ret = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>````<br><br>```python<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">arr, target</span>):<br>    n = <span class="hljs-built_in">len</span>(arr)<br>    l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    res = [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">while</span> l &lt; r:<br>        mid = l + r &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> arr[mid] &gt;= target:<br>            r = mid<br>        <span class="hljs-keyword">else</span>:<br>            l = mid + <span class="hljs-number">1</span><br>    res[<span class="hljs-number">0</span>] = l <span class="hljs-keyword">if</span> arr[l] == target <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> l &lt; r:<br>        mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> arr[mid] &lt;= target:<br>            l = mid<br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    res[<span class="hljs-number">1</span>] = l <span class="hljs-keyword">if</span> arr[l] == target <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试用例</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target = <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(find(arr, target))<br><br>arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target2 = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(find(arr2, target2))<br><br>arr3 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>target3 = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(find(arr3, target3))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>] <span class="hljs-comment"># len=m</span><br>nums2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>] <span class="hljs-comment"># len=n</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-comment"># O(log(m+n))</span><br><span class="hljs-comment"># 找出中位数</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> heappush, heappop<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_mid</span>(<span class="hljs-params">nums1, nums2</span>):<br>    left, right = [], []<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums1 + nums2:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(left) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> -left[<span class="hljs-number">0</span>] &gt;= num:<br>            heappush(left, -num)<br>        <span class="hljs-keyword">else</span>:<br>            heappush(right, num)<br>        <span class="hljs-keyword">while</span> right <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(right) &gt;= <span class="hljs-built_in">len</span>(left):<br>            right_t = heappop(right)<br>            heappush(left, -right_t)<br>        <span class="hljs-keyword">while</span> left <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(left) &gt;= <span class="hljs-built_in">len</span>(right) + <span class="hljs-number">1</span>:<br>            left_t = -heappop(left)<br>            heappush(right, left_t)<br>    <span class="hljs-comment"># print(len(left), len(right))</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(left) == <span class="hljs-built_in">len</span>(right):<br>        <span class="hljs-comment"># print(f&#x27;left:&#123;-left[0]&#125;, right:&#123;right[0]&#125;&#x27;)</span><br>        <span class="hljs-keyword">return</span> (-left[<span class="hljs-number">0</span>] + right[<span class="hljs-number">0</span>]) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> right[<span class="hljs-number">0</span>]<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 测试用例</span><br>res = find_mid([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-comment"># 1, 2, 3, 4, 5, 6, 8</span><br><br>res = find_mid([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
